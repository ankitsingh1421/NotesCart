// import type { Metadata } from "next";
// import { Inter } from "next/font/google";
// import "./globals.css";
// import { ThemeProvider } from "./components/theme-provider";
// import Navbar from "./components/Navbar";
// import prisma from "./lib/db";
// import { getKindeServerSession } from "@kinde-oss/kinde-auth-nextjs/server";
// const inter = Inter({ subsets: ["latin"] });

// export const metadata: Metadata = {
//   title: "Easy notes ",
//   description: "Generated by create next app",
// };
// async function getData(userId:string) {
//   const data = prisma.user.findUnique({
// where:{
//   id:userId
// },
// select:{
//   colorScheme:true,
// }
//   })
//   return data;
// }

// export default async function RootLayout({
//   children,
// }: Readonly<{
//   children: React.ReactNode;
// }>) {
//   const {getUser}= getKindeServerSession();
//   const user = getUser();
//   const data = await getData(user?.id as string);
//   return (
//     <html lang="en">
//       <body className={`${inter.className} ${data?.colorScheme}`}>
//       <ThemeProvider
//             attribute="class"
//             defaultTheme="system"
//             enableSystem
//             disableTransitionOnChange
//           >
//             <Navbar/>
//         {children}
//         </ThemeProvider>
//         </body>
//     </html>
//   );
// }



// import type { Metadata } from "next";
// import { Inter } from "next/font/google";
// import "./globals.css";
// import { ThemeProvider } from "./components/theme-provider";
// import Navbar from "./components/Navbar";
// import prisma from "./lib/db";
// import { getKindeServerSession } from "@kinde-oss/kinde-auth-nextjs/server";

// const inter = Inter({ subsets: ["latin"] });

// export const metadata: Metadata = {
//   title: "Easy notes",
//   description: "Generated by create next app",
// };

// async function getData(userId: string) {
//   const data = await prisma.user.findUnique({
//     where: {
//       id: userId,
//     },
//     select: {
//       colorScheme: true,
//     },
//   });
//   return data;
// }

// export default async function RootLayout({
//   children,
// }: Readonly<{
//   children: React.ReactNode;
// }>) {
//   const { getUser } = await getKindeServerSession();
//   const user = await getUser();
  
//   let colorScheme = '';

//   if (user?.id) {
//     const data = await getData(user.id);
//     colorScheme = data?.colorScheme ?? '';
//   }

//   return (
//     <html lang="en">
//       <body className={`${inter.className} ${colorScheme ?? "theme-blue"}`}>
//         <ThemeProvider
//           attribute="class"
//           defaultTheme="system"
//           enableSystem
//           disableTransitionOnChange
//         >
//           <Navbar />
//           {children}
//         </ThemeProvider>
//       </body>
//     </html>
//   );
// }


import type { Metadata } from 'next';
import { Inter } from 'next/font/google';
import './globals.css';
import { ThemeProvider } from './components/theme-provider';
import Navbar from './components/Navbar';
import prisma from './lib/db';
import { getKindeServerSession } from '@kinde-oss/kinde-auth-nextjs/server';

const inter = Inter({ subsets: ['latin'] });

export const metadata: Metadata = {
  title: 'Easy notes',
  description: 'Generated by create next app',
};

async function getData(userId: string) {
  try {
    const data = await prisma.user.findUnique({
      where: {
        id: userId,
      },
      select: {
        colorScheme: true,
      },
    });
    return data;
  } catch (error) {
    console.error('Error fetching user data:', error);
    return null;
  }
}

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const { getUser } = await getKindeServerSession();
  const user = await getUser();

  let colorScheme = '';

  if (user?.id) {
    const data = await getData(user.id);
    colorScheme = data?.colorScheme ?? '';
  }

  return (
    <html lang="en">
      <body className={`${inter.className} ${colorScheme ?? 'theme-blue'}`}>
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
          <Navbar />
          {children}
        </ThemeProvider>
      </body>
    </html>
  );
}

